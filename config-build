#!/usr/bin/env python3
from ninja_syntax import Writer
from os import chdir, makedirs, path
from sys import argv


chdir(path.dirname(argv[0]))
def mkdir(d):
    try:
        makedirs(d)
    except FileExistsError:
        pass


generator_source = ["../config-build"]
bitcode = {}
def library(writer, libname, compiler, opts, sources_file, src_prefix):
    writer.variable(libname, opts)
    writer.rule("bc.lib." + libname, compiler + " -MD -MF $out.d $bc $" + libname + " $in -o $out",
                depfile="$out.d",
                description=libname + " $out")
    bitcode[libname] = []
    with open(sources_file, 'rt') as sources:
        for src in sources.readlines():
            src = src.strip()
            bc = src + ".bc"
            writer.build(bc, "bc.lib." + libname, src_prefix + src)
            bitcode[libname].append(bc)
    generator_source.append("../" + sources_file)


targets = []
def test(writer, name, libs, exports):
    output = "../tests/" + name + ".wasm"
    linker = "link.test." + name
    bc = []
    for l in libs:
        bc += bitcode[l]
    writer.rule(linker,
            ["clang++",
                "$flags",
                "-Wl,-error-limit=0",
                "-Wl,--no-entry",
                "-Wl,--export=__wasm_call_ctors"] +
            ["-Wl,--export=" + e for e in exports] +
            ["-Wl,--lto-O3",
                "-Wl,-z,stack-size={0}".format(8 * 1024 * 1024), "$in", "-o $out"],
            description="linking $out")
    writer.build(output, linker, bc)
    writer.build("tests/" + name, "test", ["../tests/" + name + ".js", output])
    targets.append("tests/" + name)


def example(writer, name, libs, exports):
    writer.rule("bc.example." + name,
            ["$cxx", "-MD", "-MF", "$out.d", "$bc"] +
            ["$" + n for n in libs] + ["$in", "-o $out"],
        depfile="$out.d",
        description="compile $out")
    writer.build(name + ".cpp.bc", "bc.example." + name, "../" + name + ".cpp")
    bc = [name + ".cpp.bc"]
    for l in libs:
        bc += bitcode[l]
    writer.rule("link." + name,
            ["clang++",
                "$flags",
                "-Wl,-error-limit=0",
                "-Wl,--no-entry",
                "-Wl,--export=__wasm_call_ctors"] +
            ["-Wl,--export=" + e for e in exports] +
            ["-Wl,--lto-O3",
                "-Wl,-z,stack-size={0}".format(8 * 1024 * 1024), "$in", "-o $out"],
            description="linking $out")
    writer.build("../" + name + ".wasm", "link." + name, bc)
    targets.append("../" + name + ".wasm")


mkdir("build.tmp")
with open("build.tmp/build.ninja", 'wt') as ninja:
    writer = Writer(ninja)
    writer.variable("builddir", ".")

    writer.variable("bc",  "-emit-llvm -c")
    writer.variable("flags", [
        "--target=wasm32",
        "-nostdlib",
        "-ffreestanding",
        "-fno-exceptions",
        "-O3",
        "-ffast-math"])
    writer.variable("includes", [
        "-I/usr/lib/llvm-13/include/c++/v1/",
        "-I/usr/include",
        "-I/usr/include/x86_64-linux-gnu"])

    writer.variable("cc", [
        "clang",
        "$flags",
        "$includes"])
    writer.variable("cxx", [
        "clang++",
        "--std=c++20",
        "-D_LIBCPP_HAS_NO_THREADS",
        "$flags",
        "$includes"])

    # SoftFloat
    library(writer, "softfloat", "$cc", [
            "-I../libs/",
            "-I../libs/SoftFloat/source/include",
            "-I../libs/SoftFloat/source/8086"],
        "libs/SoftFloat.sources", "../libs/")

    # stdlib
    library(writer, "stdlib", "$cxx", [
            "-I../libs/memory/include/",
            "$softfloat"],
        "stdlib/stdlib.sources", "../stdlib/")

    # OPUS
    library(writer, "opus", "$cc", [
            "-DFLOAT_APPROX",
            "-DOPUS_BUILD=1",
            "-DVAR_ARRAYS=1",
            "-DHAVE_LRINT",
            "-DHAVE_LRINTF",
            "-I../libs/opus/celt",
            "-I../libs/opus/include",
            "-I../libs/opus/silk",
            "-I../libs/opus/silk/float"],
        "libs/opus.sources", "../libs/opus/")

    # tests
    writer.rule("test", ["node", "$in", "&&", "touch", "$out"],
        description="testing $out")
    test(writer, "maths", ["softfloat", "stdlib"], ["cos", "exp", "sqrt"])

    # examples
    example(writer, "opus",
            ["softfloat", "stdlib", "opus"],
            ["malloc", "free",
                "create_decoder", "decoder_error", "decode_float", "free_decoder",
                "sqrt", "cos", "exp"])
    example(writer, "test1", ["stdlib"], ["add"])

    # Regenerate build configuration when needed
    writer.rule("gen", "../config-build",
                generator=1,
                description="Re-generate build files")
    writer.build("build.ninja", "gen", generator_source)

    writer.build("all", "phony", ["build.ninja"] + targets)
